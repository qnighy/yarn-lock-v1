import yaml from "js-yaml";

export function convertLockfile(lockV2: string): string {
  const lockV2Obj = yaml.load(lockV2);

  let lockV1 = "";
  lockV1 += "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n"
  lockV1 += "# yarn lockfile v1\n"
  lockV1 += "\n";

  for (const [packageKey, packageData] of Object.entries(lockV2Obj as object)) {
    if (packageKey === "__metadata") continue;
    if (/@(?:patch|workspace):/.test(packageKey)) continue;

    lockV1 += "\n";
    lockV1 += `${convertKey(packageKey)}:\n`;
    if (typeof packageData.version === "string") {
      lockV1 += `  version ${JSON.stringify(packageData.version)}\n`;
    }
    if (typeof packageData.resolution === "string") {
      const resolvedUrl = convertResolution(packageData.resolution);
      if (resolvedUrl) {
        lockV1 += `  resolved ${JSON.stringify(resolvedUrl)}\n`;
      }
    }
    lockV1 += convertDependencies(packageData.dependencies);
  }

  return lockV1;
}

function convertDependencies(dependencies: unknown): string {
  let output = "";
  if (typeof dependencies !== "object" || dependencies === null) return output;
  output += '  dependencies:\n';

  for (const [depKey, depValue] of Object.entries(dependencies)) {
    output += `    ${escapeIfNeeded(depKey)} ${JSON.stringify(depValue)}\n`;
  }
  return output;
}

function convertResolution(resolutionV2: string): string | null {
  const [packageName, packageResolution] = resolutionV2.split(/(?!^@)@/, 2);
  const packageBaseName = packageName.split('/').reverse()[0];
  const [protocol, protocolValue] = packageResolution.split(':', 2);
  switch (protocol) {
    case 'npm': {
      const version = protocolValue;
      return `https://registry.yarnpkg.com/${packageName}/-/${packageBaseName}-${version}.tgz`;
    }
    default:
      throw new Error(`unknown package protocol: ${JSON.stringify(protocol)}`);
  }
}

function convertKey(keyV2: string): string {
  return keyV2.split(", ").map((constraintV2) => {
    const constraintV1 = constraintV2.replace("@npm:", "@");
    return escapeIfNeeded(constraintV1);
  }).join(", ");
}

function escapeIfNeeded(val: string): string {
  return /^@| /.test(val) ? JSON.stringify(val) : val;
}
